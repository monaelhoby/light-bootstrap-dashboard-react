{"ast":null,"code":"import { db } from '../firebase'; // import {crypto} from 'crypto'\n\nconst crypto = require(\"crypto\");\n\nexport const handleAddCode = (code, setCodes) => {\n  const length = Number(code.lengthCode);\n  let cryptoCode = null;\n  cryptoCode = crypto.randomBytes(length).toString(\"hex\");\n  db.collection(\"codes\").add({\n    code: code.perfixCode + cryptoCode,\n    dateAdded: new Date().toLocaleString(),\n    productActivated: code.apps,\n    purchasedLocation: code.purchasedLocation\n  }).then(codes => {\n    db.collection(\"codes\").get().then(snapshot => {\n      let codes = [];\n      snapshot.docs.forEach(code => {\n        code.checked = false;\n        codes.push(code);\n      });\n      setCodes([...codes]); // callback()\n    });\n  }).catch(error => {\n    console.error(\"Error writing document: \", error);\n  });\n};","map":{"version":3,"sources":["E:/Folder/React/projects/my_freelance_work/M.Radwan Work/light-bootstrap-dashboard-react/src/views/codeActions.js"],"names":["db","crypto","require","handleAddCode","code","setCodes","length","Number","lengthCode","cryptoCode","randomBytes","toString","collection","add","perfixCode","dateAdded","Date","toLocaleString","productActivated","apps","purchasedLocation","then","codes","get","snapshot","docs","forEach","checked","push","catch","error","console"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,aAAjB,C,CACA;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAMC,QAAN,KAAmB;AAC5C,QAAMC,MAAM,GAAGC,MAAM,CAACH,IAAI,CAACI,UAAN,CAArB;AACA,MAAIC,UAAU,GAAG,IAAjB;AACAA,EAAAA,UAAU,GAAGR,MAAM,CAACS,WAAP,CAAmBJ,MAAnB,EAA2BK,QAA3B,CAAoC,KAApC,CAAb;AACAX,EAAAA,EAAE,CAACY,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2B;AACvBT,IAAAA,IAAI,EAAGA,IAAI,CAACU,UAAL,GAAgBL,UADA;AAEvBM,IAAAA,SAAS,EAAG,IAAIC,IAAJ,GAAWC,cAAX,EAFW;AAGvBC,IAAAA,gBAAgB,EAAGd,IAAI,CAACe,IAHD;AAIvBC,IAAAA,iBAAiB,EAAGhB,IAAI,CAACgB;AAJF,GAA3B,EAMCC,IAND,CAMOC,KAAD,IAAW;AACbtB,IAAAA,EAAE,CAACY,UAAH,CAAc,OAAd,EAAuBW,GAAvB,GAA6BF,IAA7B,CAAkCG,QAAQ,IAAE;AACxC,UAAIF,KAAK,GAAG,EAAZ;AACAE,MAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsBtB,IAAI,IAAE;AACxBA,QAAAA,IAAI,CAACuB,OAAL,GAAe,KAAf;AACAL,QAAAA,KAAK,CAACM,IAAN,CAAWxB,IAAX;AACH,OAHD;AAIAC,MAAAA,QAAQ,CAAC,CAAC,GAAGiB,KAAJ,CAAD,CAAR,CANwC,CAOxC;AACH,KARD;AASH,GAhBD,EAiBCO,KAjBD,CAiBQC,KAAD,IAAW;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACH,GAnBD;AAoBH,CAxBM","sourcesContent":["import {db} from '../firebase';\r\n// import {crypto} from 'crypto'\r\nconst crypto = require(\"crypto\");\r\n\r\nexport const handleAddCode = (code,setCodes) => {\r\n    const length = Number(code.lengthCode) \r\n    let cryptoCode = null;\r\n    cryptoCode = crypto.randomBytes(length).toString(\"hex\")\r\n    db.collection(\"codes\").add({\r\n        code : code.perfixCode+cryptoCode,\r\n        dateAdded : new Date().toLocaleString(),\r\n        productActivated : code.apps,\r\n        purchasedLocation : code.purchasedLocation\r\n    })\r\n    .then((codes) => {\r\n        db.collection(\"codes\").get().then(snapshot=>{\r\n            let codes = [];\r\n            snapshot.docs.forEach(code=>{\r\n                code.checked = false;\r\n                codes.push(code)\r\n            })\r\n            setCodes([...codes]);\r\n            // callback()\r\n        })\r\n    })\r\n    .catch((error) => {\r\n        console.error(\"Error writing document: \", error);\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}
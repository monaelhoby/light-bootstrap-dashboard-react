{"ast":null,"code":"import { db, functions } from \"../firebase\";\nconst updateUser = functions.httpsCallable(\"updateUser\");\nexport const handleEditAdmin = (admin, setAdmins, callback) => {\n  let theAdmins = []; // console.log(admin)\n\n  return db.collection(\"admins\").doc(admin.Uid).update({\n    email: admin.email,\n    firstName: admin.firstName,\n    lastName: admin.lastName\n  }).then(() => {\n    db.collection(\"users\").get().then(snapshot => {\n      snapshot.docs.forEach(user => {\n        user.checked = false;\n        theAdmins.push(user);\n      });\n    });\n    setAdmins([...theAdmins]); // updateUsers(admin)\n\n    callback();\n  }).catch(err => {\n    console.log(\"Err is \", err);\n  });\n};\nexport const handleDeleteAdmin = (uid, admins, i, setAdmins) => {\n  admins.splice(i, 1);\n  setAdmins([...admins]);\n  return db.collection(\"admins\").doc(uid).delete().catch(err => {\n    console.log(\"Err is \", err);\n  });\n}; // const updateUsers = (admin) => {\n//     db.collection(\"users\").get().then(snapshot=>{\n//         snapshot.docs.forEach(user=>{\n//             let user = user.data().find(user => {\n//                 return user.id !== admin.Uid;\n//             });\n//             let newUser = {}\n//             newUser.firstName = admin.firstName;\n//             newUser.lastName = admin.lastName;\n//             newUser.email = admin.email;\n//             newUser.creationDate = user.creationDate;\n//             newUser.lastLoginDate = user.lastLoginDate;\n//             newUser.userCode = user.userCode;\n//             newUser.password = user.password;\n//             newUser.products = user.products;\n//             db.collection(\"users\").doc(user.id).set({\n//                 newUser\n//             },{merge:true})\n//         })\n//     })\n// }","map":{"version":3,"sources":["E:/Folder/React/projects/my_freelance_work/M.Radwan Work/light-bootstrap-dashboard-react/src/views/adminAction.js"],"names":["db","functions","updateUser","httpsCallable","handleEditAdmin","admin","setAdmins","callback","theAdmins","collection","doc","Uid","update","email","firstName","lastName","then","get","snapshot","docs","forEach","user","checked","push","catch","err","console","log","handleDeleteAdmin","uid","admins","i","splice","delete"],"mappings":"AAAA,SAASA,EAAT,EAAaC,SAAb,QAA8B,aAA9B;AAGA,MAAMC,UAAU,GAAID,SAAS,CAACE,aAAV,CAAwB,YAAxB,CAApB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAOC,SAAP,EAAiBC,QAAjB,KAA4B;AACvD,MAAIC,SAAS,GAAG,EAAhB,CADuD,CAEvD;;AACA,SAAOR,EAAE,CAACS,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BL,KAAK,CAACM,GAAlC,EAAuCC,MAAvC,CAA8C;AACjDC,IAAAA,KAAK,EAACR,KAAK,CAACQ,KADqC;AAEjDC,IAAAA,SAAS,EAACT,KAAK,CAACS,SAFiC;AAGjDC,IAAAA,QAAQ,EAACV,KAAK,CAACU;AAHkC,GAA9C,EAIAC,IAJA,CAIK,MAAI;AACZhB,IAAAA,EAAE,CAACS,UAAH,CAAc,OAAd,EAAuBQ,GAAvB,GAA6BD,IAA7B,CAAkCE,QAAQ,IAAE;AACxCA,MAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsBC,IAAI,IAAE;AACxBA,QAAAA,IAAI,CAACC,OAAL,GAAe,KAAf;AACAd,QAAAA,SAAS,CAACe,IAAV,CAAeF,IAAf;AACH,OAHD;AAIH,KALD;AAMAf,IAAAA,SAAS,CAAC,CAAC,GAAGE,SAAJ,CAAD,CAAT,CAPY,CAQZ;;AACAD,IAAAA,QAAQ;AACX,GAdM,EAeNiB,KAfM,CAeAC,GAAG,IAAE;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACH,GAjBM,CAAP;AAkBH,CArBM;AAuBP,OAAO,MAAMG,iBAAiB,GAAG,CAACC,GAAD,EAAKC,MAAL,EAAYC,CAAZ,EAAczB,SAAd,KAA0B;AACvDwB,EAAAA,MAAM,CAACE,MAAP,CAAcD,CAAd,EAAiB,CAAjB;AACAzB,EAAAA,SAAS,CAAC,CAAC,GAAGwB,MAAJ,CAAD,CAAT;AAEA,SAAO9B,EAAE,CAACS,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BmB,GAA5B,EAAiCI,MAAjC,GACNT,KADM,CACAC,GAAG,IAAE;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACH,GAHM,CAAP;AAIH,CARM,C,CAUP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { db, functions } from \"../firebase\";\r\n\r\n\r\nconst updateUser  = functions.httpsCallable(\"updateUser\");\r\n\r\nexport const handleEditAdmin = (admin,setAdmins,callback)=>{\r\n    let theAdmins = []\r\n    // console.log(admin)\r\n    return db.collection(\"admins\").doc(admin.Uid).update({\r\n        email:admin.email,\r\n        firstName:admin.firstName,\r\n        lastName:admin.lastName,\r\n        }).then(()=>{\r\n        db.collection(\"users\").get().then(snapshot=>{\r\n            snapshot.docs.forEach(user=>{\r\n                user.checked = false;\r\n                theAdmins.push(user)\r\n            })\r\n        })\r\n        setAdmins([...theAdmins]);\r\n        // updateUsers(admin)\r\n        callback();\r\n    })\r\n    .catch(err=>{\r\n        console.log(\"Err is \", err)\r\n    })\r\n}\r\n\r\nexport const handleDeleteAdmin = (uid,admins,i,setAdmins)=>{\r\n    admins.splice(i, 1);\r\n    setAdmins([...admins]);\r\n\r\n    return db.collection(\"admins\").doc(uid).delete()\r\n    .catch(err=>{\r\n        console.log(\"Err is \", err)\r\n    })\r\n}\r\n\r\n// const updateUsers = (admin) => {\r\n//     db.collection(\"users\").get().then(snapshot=>{\r\n//         snapshot.docs.forEach(user=>{\r\n//             let user = user.data().find(user => {\r\n//                 return user.id !== admin.Uid;\r\n//             });\r\n            \r\n//             let newUser = {}\r\n//             newUser.firstName = admin.firstName;\r\n//             newUser.lastName = admin.lastName;\r\n//             newUser.email = admin.email;\r\n//             newUser.creationDate = user.creationDate;\r\n//             newUser.lastLoginDate = user.lastLoginDate;\r\n//             newUser.userCode = user.userCode;\r\n//             newUser.password = user.password;\r\n//             newUser.products = user.products;\r\n\r\n            \r\n//             db.collection(\"users\").doc(user.id).set({\r\n//                 newUser\r\n//             },{merge:true})\r\n//         })\r\n//     })\r\n// }"]},"metadata":{},"sourceType":"module"}
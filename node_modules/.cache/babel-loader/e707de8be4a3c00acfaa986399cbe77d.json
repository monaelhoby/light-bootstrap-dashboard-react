{"ast":null,"code":"import { functions, db } from \"../firebase\";\nconst deleteUser = functions.httpsCallable(\"deleteUser\");\nconst deleteUsers = functions.httpsCallable(\"deleteUsers\");\nconst updateUser = functions.httpsCallable(\"updateUser\");\nexport const handleUpdateUser = (user, setUsers, callback) => {\n  let theUsers = [];\n  return updateUser(user).then(() => {\n    db.collection(\"users\").doc(user.uid).update({\n      email: user.email,\n      password: user.password,\n      userName: user.userName,\n      userCode: user.userCode,\n      products: user.products\n    }).then(() => {\n      db.collection(\"users\").get().then(snapshot => {\n        snapshot.docs.forEach(user => {\n          user.checked = false;\n          user.purchased = false;\n          theUsers.push(user);\n        });\n        setUsers([...theUsers]);\n      });\n    });\n  }).catch(err => {\n    console.log(\"Err is \", err);\n  });\n};\nexport const handleDeleteUser = (uid, users, i, setUsers) => {\n  users.splice(i, 1);\n  setUsers([...users]);\n  return deleteUser({\n    uid: uid\n  }).then(() => {\n    db.collection(\"users\").doc(uid).delete();\n  }).catch(err => {\n    console.log(\"Err is \", err);\n  });\n};\nexport const handleDeleteUsers = ids => {\n  return deleteUsers(ids).then(res => {\n    console.log(\"res after deleting users\", res);\n    ids.forEach(uid => {\n      db.collection(\"users\").doc(uid).delete();\n    });\n  }).catch(err => {\n    console.log(\"ERR\", err);\n  });\n};\n\nconst deleteDoc = n => {\n  if (n == 0) return;\n  console.log(n);\n};\n\nconst returnFilteredUsers = (users, userId) => {\n  let newUsers = users.filter(user => {\n    return user.id !== userId;\n  });\n  return newUsers;\n};","map":{"version":3,"sources":["E:/Folder/React/projects/my_freelance_work/M.Ramdan Work/light-bootstrap-dashboard-react/src/views/UsersAction.js"],"names":["functions","db","deleteUser","httpsCallable","deleteUsers","updateUser","handleUpdateUser","user","setUsers","callback","theUsers","then","collection","doc","uid","update","email","password","userName","userCode","products","get","snapshot","docs","forEach","checked","purchased","push","catch","err","console","log","handleDeleteUser","users","i","splice","delete","handleDeleteUsers","ids","res","deleteDoc","n","returnFilteredUsers","userId","newUsers","filter","id"],"mappings":"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","sourcesContent":["import { functions, db } from \"../firebase\";\r\nconst deleteUser  = functions.httpsCallable(\"deleteUser\");\r\nconst deleteUsers = functions.httpsCallable(\"deleteUsers\");\r\nconst updateUser  = functions.httpsCallable(\"updateUser\");\r\n\r\nexport const handleUpdateUser = (user,setUsers,callback)=>{\r\n    let theUsers = []\r\n    return updateUser(user)\r\n    .then(()=>{\r\n        db.collection(\"users\").doc(user.uid).update({\r\n            email:user.email,\r\n            password:user.password,\r\n            userName:user.userName,\r\n            userCode:user.userCode,\r\n            products:user.products\r\n        }).then(()=>{\r\n            db.collection(\"users\").get().then(snapshot=>{\r\n                snapshot.docs.forEach(user=>{\r\n                    user.checked = false;\r\n                    user.purchased = false;\r\n                    theUsers.push(user);\r\n                })\r\n                setUsers([...theUsers]);\r\n            })\r\n        })\r\n    })\r\n    .catch(err=>{\r\n        console.log(\"Err is \", err)\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nexport const handleDeleteUser = (uid,users,i,setUsers)=>{\r\n    users.splice(i, 1);\r\n    setUsers([...users]);\r\n\r\n    return deleteUser({uid:uid})\r\n    .then(()=>{\r\n        db.collection(\"users\").doc(uid).delete();\r\n\r\n    })\r\n    .catch(err=>{\r\n        console.log(\"Err is \", err)\r\n    })\r\n}\r\nexport const handleDeleteUsers = (ids) =>{\r\n    return deleteUsers(ids)\r\n    .then(res=>{\r\n        console.log(\"res after deleting users\",res);\r\n        ids.forEach(uid => {\r\n            db.collection(\"users\").doc(uid).delete();\r\n        });\r\n    }).catch(err=>{\r\n        console.log(\"ERR\",err);\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nconst deleteDoc = (n)=>{\r\n    if(n == 0) return;\r\n\r\n    console.log(n);\r\n}\r\n\r\nconst returnFilteredUsers = (users,userId)=>{\r\n    let newUsers = users.filter(user=>{\r\n        return user.id !== userId;\r\n    })\r\n    return newUsers; \r\n}"]},"metadata":{},"sourceType":"module"}
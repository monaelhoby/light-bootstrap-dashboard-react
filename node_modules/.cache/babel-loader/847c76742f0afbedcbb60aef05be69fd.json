{"ast":null,"code":"import { db } from \"../firebase\";\nexport const handleEditProduct = (editableProduct, setProducts, callback) => {\n  db.collection(\"products\").doc(editableProduct.id).update({\n    name: editableProduct.name,\n    url: editableProduct.url,\n    visibility: addedProduct.visibility,\n    apps: editableProduct.apps\n  }).then(() => {\n    db.collection(\"products\").get().then(snapshot => {\n      setProducts([...snapshot.docs]);\n      updateProductsinUsers(editableProduct);\n      callback();\n    });\n  });\n};\nexport const handleAddNewProduct = (addedProduct, setProducts, callback) => {\n  db.collection(\"products\").add({\n    name: addedProduct.name,\n    url: addedProduct.url,\n    visibility: addedProduct.visibility,\n    apps: addedProduct.apps\n  }).then(newProduct => {\n    db.collection(\"products\").get().then(snapshot => {\n      setProducts([...snapshot.docs]);\n      addNewProductToUsers(addedProduct, newProduct.id);\n      callback();\n    });\n  }).catch(error => {\n    console.error(\"Error writing document: \", error);\n  });\n};\nexport const handleDeleteProduct = (product, setProducts) => {\n  db.collection(\"products\").doc(product.id).delete().then(() => {\n    db.collection(\"products\").get().then(snapshot => {\n      setProducts([...snapshot.docs]);\n      deleteProductFromUsers(product.data().name);\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nconst updateProductsinUsers = product => {\n  db.collection(\"users\").get().then(snapshot => {\n    snapshot.docs.forEach(user => {\n      let products = user.data().products.filter(p => {\n        return product.id !== p.id;\n      });\n      let oldProduct = user.data().products.find(p => {\n        return product.id == p.id;\n      });\n      console.log(\"a name\", product);\n      let theNewProduct = {};\n      theNewProduct.name = product.name;\n      theNewProduct.id = product.id;\n      theNewProduct.apps = [];\n      product.apps.forEach(a => {\n        let exist = false;\n        let generatedApp = {};\n        oldProduct.apps.forEach(app => {\n          generatedApp.name = a;\n\n          if (app.name == a) {\n            exist = true;\n            generatedApp.active = app.active;\n          }\n        });\n\n        if (!exist) {\n          generatedApp.active = false;\n        }\n\n        theNewProduct.apps.push(generatedApp);\n      });\n      products.push(theNewProduct);\n      db.collection(\"users\").doc(user.id).set({\n        products\n      }, {\n        merge: true\n      });\n    });\n  });\n};\n\nexport const deleteProductFromUsers = productName => {\n  db.collection(\"users\").get().then(snapshot => {\n    snapshot.docs.forEach(user => {\n      let products = user.data().products.filter(product => {\n        console.log(product.name, productName);\n        return product.name !== productName;\n      });\n      console.log(\"products is \", products);\n      db.collection(\"users\").doc(user.id).set({\n        products\n      }, {\n        merge: true\n      });\n    });\n  });\n};\n\nconst addNewProductToUsers = (product, productId) => {\n  db.collection(\"users\").get().then(snapshot => {\n    let theProduct = {};\n    theProduct.name = product.name;\n    theProduct.apps = [];\n    theProduct.id = productId; // theProduct.id = product.id;\n\n    product.apps.forEach(app => {\n      theProduct.apps.push({\n        name: app,\n        active: false\n      });\n    });\n    snapshot.docs.forEach(user => {\n      let products = user.data().products;\n      products.push(theProduct);\n      db.collection(\"users\").doc(user.id).set({\n        products\n      }, {\n        merge: true\n      });\n    });\n  });\n}; // const resetUsersDetails = () =>{\n//     let products;\n//     db.collection(\"products\").get().then(snapshot=>{\n//         products = snapshot.docs;\n//         db.collection(\"users\").get().then(snapshot=>{\n//             snapshot.docs.forEach(user=>{\n//                 products.forEach(product=>{\n//                     user.products\n//                 })\n//             })\n//         })\n//     });  \n// }","map":{"version":3,"sources":["E:/Folder/React/projects/my_freelance_work/M.Ramdan Work/light-bootstrap-dashboard-react/src/views/ProductsActions.js"],"names":["db","handleEditProduct","editableProduct","setProducts","callback","collection","doc","id","update","name","url","visibility","addedProduct","apps","then","get","snapshot","docs","updateProductsinUsers","handleAddNewProduct","add","newProduct","addNewProductToUsers","catch","error","console","handleDeleteProduct","product","delete","deleteProductFromUsers","data","err","log","forEach","user","products","filter","p","oldProduct","find","theNewProduct","a","exist","generatedApp","app","active","push","set","merge","productName","productId","theProduct"],"mappings":"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","sourcesContent":["import { db } from \"../firebase\";\r\n\r\nexport const handleEditProduct = (editableProduct,setProducts,callback)=>{\r\n    db.collection(\"products\").doc(editableProduct.id).update({\r\n        name:editableProduct.name,\r\n        url: editableProduct.url,\r\n        visibility: addedProduct.visibility,\r\n        apps:editableProduct.apps\r\n    }).then(()=>{\r\n        db.collection(\"products\").get()\r\n        .then(snapshot=>{\r\n            setProducts([...snapshot.docs]);\r\n            updateProductsinUsers(editableProduct)\r\n            callback();\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport const handleAddNewProduct = (addedProduct,setProducts,callback)=>{\r\n    db.collection(\"products\").add({\r\n        name: addedProduct.name,\r\n        url: addedProduct.url,\r\n        visibility: addedProduct.visibility,\r\n        apps: addedProduct.apps\r\n    })\r\n    .then((newProduct) => {\r\n        db.collection(\"products\").get()\r\n        .then(snapshot=>{\r\n            setProducts([...snapshot.docs]);\r\n            addNewProductToUsers(addedProduct,newProduct.id)\r\n            callback()\r\n        })\r\n    })\r\n    .catch((error) => {\r\n        console.error(\"Error writing document: \", error);\r\n    });\r\n}\r\n\r\nexport const handleDeleteProduct = (product,setProducts)=>{\r\n    db.collection(\"products\").doc(product.id).delete()\r\n    .then(()=>{\r\n        db.collection(\"products\").get()\r\n        .then(snapshot=>{\r\n            setProducts([...snapshot.docs]);\r\n            deleteProductFromUsers(product.data().name);\r\n        })\r\n    })\r\n    .catch((err)=>{\r\n        console.log(err)\r\n    })\r\n\r\n}\r\n\r\nconst updateProductsinUsers = (product)=>{\r\n    db.collection(\"users\").get().then(snapshot=>{\r\n        snapshot.docs.forEach(user=>{\r\n            let products = user.data().products.filter(p=>{\r\n                return product.id !== p.id;\r\n            });\r\n\r\n            let oldProduct = user.data().products.find(p=>{\r\n                return product.id == p.id\r\n            })\r\n            \r\n            console.log(\"a name\",product)\r\n\r\n\r\n            let theNewProduct = {};\r\n            theNewProduct.name = product.name;\r\n            theNewProduct.id = product.id;\r\n            theNewProduct.apps = [];\r\n            product.apps.forEach((a)=>{\r\n                let exist = false;\r\n                let generatedApp   = {};\r\n                oldProduct.apps.forEach((app)=>{\r\n                    generatedApp.name = a;\r\n\r\n                    if(app.name == a){\r\n                        exist = true;\r\n                        generatedApp.active = app.active\r\n                    }\r\n                })\r\n\r\n                if(!exist){\r\n                    generatedApp.active = false;\r\n                }\r\n\r\n                theNewProduct.apps.push(generatedApp)\r\n            })\r\n\r\n            products.push(theNewProduct)\r\n            db.collection(\"users\").doc(user.id).set({\r\n                products\r\n            },{merge:true})\r\n        })\r\n    })\r\n}\r\n\r\nexport const deleteProductFromUsers = (productName)=>{\r\n    db.collection(\"users\").get().then(snapshot=>{\r\n        snapshot.docs.forEach(user=>{\r\n            let products = user.data().products.filter(product=>{\r\n                console.log(product.name,productName)\r\n                return product.name !== productName;\r\n            });\r\n\r\n            console.log(\"products is \",products)\r\n            db.collection(\"users\").doc(user.id).set({\r\n                products\r\n            },{merge:true})\r\n        })\r\n    })\r\n}\r\nconst addNewProductToUsers = (product,productId)=>{\r\n    db.collection(\"users\").get().then(snapshot=>{\r\n        \r\n        let theProduct = {};\r\n        theProduct.name = product.name;\r\n        theProduct.apps = [];\r\n        theProduct.id = productId\r\n        // theProduct.id = product.id;\r\n        product.apps.forEach(app=>{\r\n            theProduct.apps.push({\r\n                name:app,\r\n                active:false\r\n            })\r\n        })\r\n        \r\n        snapshot.docs.forEach(user=>{\r\n            let products = user.data().products;\r\n            products.push(theProduct);\r\n            db.collection(\"users\").doc(user.id).set({\r\n                products\r\n            },{merge:true})\r\n        })\r\n    })\r\n}\r\n\r\n\r\n// const resetUsersDetails = () =>{\r\n//     let products;\r\n//     db.collection(\"products\").get().then(snapshot=>{\r\n//         products = snapshot.docs;\r\n//         db.collection(\"users\").get().then(snapshot=>{\r\n//             snapshot.docs.forEach(user=>{\r\n//                 products.forEach(product=>{\r\n//                     user.products\r\n//                 })\r\n//             })\r\n//         })\r\n//     });  \r\n// }"]},"metadata":{},"sourceType":"module"}
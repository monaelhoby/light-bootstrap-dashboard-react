{"ast":null,"code":"import { db } from \"../../firebase\";\nexport const handleDeactiveApp = (user, product, theApp, setUser) => {\n  let newUser = user;\n  let editableProduct = newUser.products.find(p => {\n    return p.name == product.name;\n  });\n  newUser.products = newUser.products.filter(p => {\n    return p.name !== product.name;\n  });\n  editableProduct.apps.forEach(app => {\n    if (app.name.name == theApp.name.name) {\n      app.deviceId = \"\";\n    }\n  });\n  newUser.products.push(editableProduct);\n  setUser({ ...newUser\n  });\n  return db.collection('users').doc(user.id).set(newUser);\n};\nexport const handleDeactiveAllApps = (user, product, setUser, callback) => {\n  let newUser = user;\n  let editableProduct = newUser.products.find(p => {\n    return p.name == product.name;\n  });\n  newUser.products = newUser.products.filter(p => {\n    return p.name !== product.name;\n  });\n  editableProduct.apps.forEach(app => {\n    app.deviceId = \"\";\n  });\n  newUser.products.push(editableProduct);\n  setUser({ ...newUser\n  });\n  callback();\n  return db.collection('users').doc(user.id).set(newUser);\n};\nexport const handleInactiveCode = (code, email, id, productActivated, callback) => {\n  db.collection(\"codes\").get().then(snapshot => {\n    let activeCodeObject = {};\n    snapshot.docs.forEach(oneCode => {\n      if (Array.isArray(oneCode.data().code)) {\n        let activeCode = \"\";\n        activeCode = oneCode.data().code.find(singleCode => singleCode == code);\n\n        if (activeCode) {\n          activeCodeObject = oneCode.data();\n        }\n      } else if (!Array.isArray(oneCode.data().code)) {\n        if (oneCode.data().code == code) {\n          activeCodeObject = oneCode.data();\n        } else {\n          return;\n        }\n      }\n    });\n    db.collection(\"inactiveCodes\").add({\n      inactiveCode: code,\n      activatedBy: email,\n      dataAdded: new Date().toLocaleString(),\n      placeOfPurchase: activeCodeObject.purchasedLocation,\n      productActivated: activeCodeObject.productActivated,\n      notes: activeCodeObject.notes\n    }).then(() => {\n      updateAppsinUser(productActivated, id);\n      callback();\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nconst updateAppsinUser = (productsActivated, id, code) => {\n  db.collection(\"users\").doc(id).get().then(snapshot => {\n    // console.log(snapshot.data())\n    snapshot.data().products.forEach(p => {\n      productsActivated.forEach(ActivatedProduct => {\n        let generatedApp = {};\n        let newProducts = p;\n        newProducts.apps = [];\n\n        if (ActivatedProduct.productName == p.name) {\n          p.apps.forEach(app => {\n            if (app.name.name == ActivatedProduct.appName) {\n              generatedApp.active = true;\n              generatedApp.purchased = true;\n              generatedApp.credentials = app.credentials;\n              generatedApp.expireDate = app.expireDate;\n              generatedApp.timesAppLaunchedLastLogin = app.timesAppLaunchedLastLogin;\n              generatedApp.timesAppLaunchedPurchased = app.timesAppLaunchedPurchased;\n              generatedApp.lastLaunchDate = app.lastLaunchDate;\n              generatedApp.timesAppLaunched = app.timesAppLaunched;\n              generatedApp.deviceId = app.deviceId;\n              generatedApp.activatedOn = new Date().toLocaleString();\n              generatedApp.codeUsed = code;\n              generatedApp.DateofLastUse = app.DateofLastUse;\n              generatedApp.LaunchesSinceActive = app.LaunchesSinceActive;\n            } else {\n              generatedApp.active = app.active, generatedApp.purchased = app.purchased;\n              generatedApp.credentials = app.credentials;\n              generatedApp.expireDate = app.expireDate;\n              generatedApp.timesAppLaunchedLastLogin = app.timesAppLaunchedLastLogin;\n              generatedApp.timesAppLaunchedPurchased = app.timesAppLaunchedPurchased;\n              generatedApp.lastLaunchDate = app.lastLaunchDate;\n              generatedApp.timesAppLaunched = app.timesAppLaunched;\n              generatedApp.deviceId = app.deviceId;\n              generatedApp.activatedOn = app.activatedOn;\n              generatedApp.codeUsed = app.codeUsed;\n              generatedApp.DateofLastUse = app.DateofLastUse;\n              generatedApp.LaunchesSinceActive = app.LaunchesSinceActive;\n            }\n          });\n        }\n      });\n      newProducts.apps.push(generatedApp);\n    });\n    console.log(newProducts);\n    db.collection(\"users\").doc(id).set({\n      products: newProducts\n    }, {\n      merge: true\n    });\n  });\n};","map":{"version":3,"sources":["E:/Folder/React/projects/my_freelance_work/M.Radwan Work/light-bootstrap-dashboard-react/src/components/userPortal/appAction.js"],"names":["db","handleDeactiveApp","user","product","theApp","setUser","newUser","editableProduct","products","find","p","name","filter","apps","forEach","app","deviceId","push","collection","doc","id","set","handleDeactiveAllApps","callback","handleInactiveCode","code","email","productActivated","get","then","snapshot","activeCodeObject","docs","oneCode","Array","isArray","data","activeCode","singleCode","add","inactiveCode","activatedBy","dataAdded","Date","toLocaleString","placeOfPurchase","purchasedLocation","notes","updateAppsinUser","catch","err","console","log","productsActivated","ActivatedProduct","generatedApp","newProducts","productName","appName","active","purchased","credentials","expireDate","timesAppLaunchedLastLogin","timesAppLaunchedPurchased","lastLaunchDate","timesAppLaunched","activatedOn","codeUsed","DateofLastUse","LaunchesSinceActive","merge"],"mappings":"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","sourcesContent":["import { db } from \"../../firebase\";\r\n\r\n\r\nexport const handleDeactiveApp = (user,product,theApp,setUser) => {\r\n    let newUser = user;\r\n    let editableProduct = newUser.products.find(p=>{\r\n        return p.name == product.name;\r\n    })\r\n    \r\n    newUser.products = newUser.products.filter(p=>{\r\n        return p.name !== product.name;\r\n    })\r\n\r\n    editableProduct.apps.forEach(app => {\r\n        if (app.name.name == theApp.name.name){\r\n            app.deviceId = \"\";\r\n        }\r\n    });\r\n    newUser.products.push(editableProduct);\r\n    setUser({...newUser})\r\n\r\n    return db.collection('users').doc(user.id).set(newUser) \r\n    \r\n  }\r\n\r\n  export const handleDeactiveAllApps = (user,product,setUser,callback) => {\r\n    let newUser = user;\r\n    let editableProduct = newUser.products.find(p=>{\r\n        return p.name == product.name;\r\n    })\r\n    \r\n    newUser.products = newUser.products.filter(p=>{\r\n        return p.name !== product.name;\r\n    })\r\n\r\n    editableProduct.apps.forEach(app => {\r\n            app.deviceId = \"\";\r\n    });\r\n    newUser.products.push(editableProduct);\r\n    setUser({...newUser})\r\n    callback()\r\n    return db.collection('users').doc(user.id).set(newUser) \r\n    \r\n  }\r\n\r\n  export const handleInactiveCode = (code, email, id, productActivated,callback) => {\r\n    db.collection(\"codes\").get()\r\n    .then(snapshot => {\r\n    let activeCodeObject = {};\r\n    snapshot.docs.forEach(oneCode => {\r\n        if(Array.isArray(oneCode.data().code)){\r\n            let activeCode = \"\";\r\n            activeCode = oneCode.data().code.find(singleCode => singleCode==code);\r\n            if(activeCode){\r\n                activeCodeObject = oneCode.data() \r\n            }\r\n        }else if(!Array.isArray(oneCode.data().code)){\r\n            if(oneCode.data().code == code) {\r\n                activeCodeObject = oneCode.data() \r\n            }else{\r\n                return\r\n            }\r\n        }\r\n    })\r\n    db.collection(\"inactiveCodes\").add({\r\n        inactiveCode : code,\r\n        activatedBy : email,\r\n        dataAdded : new Date().toLocaleString(),\r\n        placeOfPurchase: activeCodeObject.purchasedLocation,\r\n        productActivated: activeCodeObject.productActivated,\r\n        notes: activeCodeObject.notes,\r\n    }).then(() => {\r\n        updateAppsinUser(productActivated,id)\r\n        callback()\r\n    })\r\n    }).catch(err => {\r\n        console.log(err)\r\n    })\r\n  }\r\n\r\n  const updateAppsinUser = (productsActivated, id,code)=>{\r\n    db.collection(\"users\").doc(id).get()\r\n    .then(snapshot=>{\r\n        // console.log(snapshot.data())\r\n        snapshot.data().products.forEach((p) => {\r\n            productsActivated.forEach(ActivatedProduct => {\r\n                let generatedApp   = {};\r\n                let newProducts = p;\r\n                newProducts.apps = [];\r\n                if(ActivatedProduct.productName == p.name){\r\n                    p.apps.forEach((app)=>{\r\n                        if(app.name.name == ActivatedProduct.appName){\r\n                            generatedApp.active = true\r\n                            generatedApp.purchased= true\r\n                            generatedApp.credentials = app.credentials\r\n                            generatedApp.expireDate= app.expireDate\r\n                            generatedApp.timesAppLaunchedLastLogin = app.timesAppLaunchedLastLogin\r\n                            generatedApp.timesAppLaunchedPurchased = app.timesAppLaunchedPurchased\r\n                            generatedApp.lastLaunchDate = app.lastLaunchDate\r\n                            generatedApp.timesAppLaunched = app.timesAppLaunched\r\n                            generatedApp.deviceId = app.deviceId \r\n                            generatedApp.activatedOn= new Date().toLocaleString()\r\n                            generatedApp.codeUsed= code\r\n                            generatedApp.DateofLastUse= app.DateofLastUse\r\n                            generatedApp.LaunchesSinceActive= app.LaunchesSinceActive\r\n                        }else {\r\n                            generatedApp.active = app.active,\r\n                            generatedApp.purchased= app.purchased\r\n                            generatedApp.credentials = app.credentials\r\n                            generatedApp.expireDate= app.expireDate\r\n                            generatedApp.timesAppLaunchedLastLogin = app.timesAppLaunchedLastLogin\r\n                            generatedApp.timesAppLaunchedPurchased = app.timesAppLaunchedPurchased\r\n                            generatedApp.lastLaunchDate = app.lastLaunchDate\r\n                            generatedApp.timesAppLaunched = app.timesAppLaunched\r\n                            generatedApp.deviceId = app.deviceId \r\n                            generatedApp.activatedOn= app.activatedOn\r\n                            generatedApp.codeUsed= app.codeUsed\r\n                            generatedApp.DateofLastUse= app.DateofLastUse\r\n                            generatedApp.LaunchesSinceActive= app.LaunchesSinceActive\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            newProducts.apps.push(generatedApp)\r\n        })\r\n        console.log(newProducts)\r\n        db.collection(\"users\").doc(id).set({\r\n            products:newProducts\r\n        },{merge:true})\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}
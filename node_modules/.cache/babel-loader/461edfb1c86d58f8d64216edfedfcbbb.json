{"ast":null,"code":"import { db, functions } from \"../firebase\";\nconst updateUser = functions.httpsCallable(\"updateUser\");\nexport const handleEditAdmin = (admin, setAdmins, callback) => {\n  let theAdmins = [];\n  return updateUser(admin).then(() => {\n    db.collection(\"admins\").doc(admin.email).update({\n      email: admin.email,\n      firstName: admin.firstName,\n      lastName: admin.lastName\n    }).then(result => {\n      // db.collection(\"users\").get().then(snapshot=>{\n      //     console.log(snapshot.docs)\n      //     // snapshot.docs.forEach(user=>{\n      //     //     user.checked = false;\n      //     //     theAdmins.push(user);\n      //     // })\n      //     // setAdmins([...theAdmins]);\n      //     // updateUsers(admin)\n      //     callback();\n      // })\n      console.log(result);\n    });\n  }).catch(err => {\n    console.log(\"Err is \", err);\n  });\n}; // const updateUsers = (admin) => {\n//     db.collection(\"users\").get().then(snapshot=>{\n//         snapshot.docs.forEach(user=>{\n//             let user = user.data().find(user => {\n//                 return user.email !== admin.email;\n//             });\n//             products.push(theNewProduct)\n//             // console.log(products)\n//             db.collection(\"users\").doc(user.id).set({\n//                 products\n//             },{merge:true})\n//         })\n//     })\n// }","map":{"version":3,"sources":["E:/Folder/React/projects/my_freelance_work/M.Radwan Work/light-bootstrap-dashboard-react/src/views/adminAction.js"],"names":["db","functions","updateUser","httpsCallable","handleEditAdmin","admin","setAdmins","callback","theAdmins","then","collection","doc","email","update","firstName","lastName","result","console","log","catch","err"],"mappings":"AAAA,SAASA,EAAT,EAAaC,SAAb,QAA8B,aAA9B;AAGA,MAAMC,UAAU,GAAID,SAAS,CAACE,aAAV,CAAwB,YAAxB,CAApB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAOC,SAAP,EAAiBC,QAAjB,KAA4B;AACvD,MAAIC,SAAS,GAAG,EAAhB;AACA,SAAON,UAAU,CAACG,KAAD,CAAV,CACEI,IADF,CACO,MAAI;AAACT,IAAAA,EAAE,CAACU,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BN,KAAK,CAACO,KAAlC,EAAyCC,MAAzC,CAAgD;AAC3DD,MAAAA,KAAK,EAACP,KAAK,CAACO,KAD+C;AAE3DE,MAAAA,SAAS,EAACT,KAAK,CAACS,SAF2C;AAG3DC,MAAAA,QAAQ,EAACV,KAAK,CAACU;AAH4C,KAAhD,EAIZN,IAJY,CAINO,MAAD,IAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,KAhBc;AAiBlB,GAlBM,EAmBNG,KAnBM,CAmBAC,GAAG,IAAE;AACRH,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,GAAvB;AACH,GArBM,CAAP;AAsBH,CAxBM,C,CA0BP;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { db, functions } from \"../firebase\";\r\n\r\n\r\nconst updateUser  = functions.httpsCallable(\"updateUser\");\r\n\r\nexport const handleEditAdmin = (admin,setAdmins,callback)=>{\r\n    let theAdmins = []\r\n    return updateUser(admin)\r\n            .then(()=>{db.collection(\"admins\").doc(admin.email).update({\r\n            email:admin.email,\r\n            firstName:admin.firstName,\r\n            lastName:admin.lastName,\r\n        }).then((result)=>{\r\n            // db.collection(\"users\").get().then(snapshot=>{\r\n            //     console.log(snapshot.docs)\r\n            //     // snapshot.docs.forEach(user=>{\r\n            //     //     user.checked = false;\r\n            //     //     theAdmins.push(user);\r\n            //     // })\r\n            //     // setAdmins([...theAdmins]);\r\n            //     // updateUsers(admin)\r\n            //     callback();\r\n            // })\r\n            console.log(result)\r\n        })\r\n    })\r\n    .catch(err=>{\r\n        console.log(\"Err is \", err)\r\n    })\r\n}\r\n\r\n// const updateUsers = (admin) => {\r\n//     db.collection(\"users\").get().then(snapshot=>{\r\n//         snapshot.docs.forEach(user=>{\r\n//             let user = user.data().find(user => {\r\n//                 return user.email !== admin.email;\r\n//             });\r\n            \r\n\r\n//             products.push(theNewProduct)\r\n//             // console.log(products)\r\n//             db.collection(\"users\").doc(user.id).set({\r\n//                 products\r\n//             },{merge:true})\r\n//         })\r\n//     })\r\n// }"]},"metadata":{},"sourceType":"module"}
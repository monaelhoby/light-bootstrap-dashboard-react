{"ast":null,"code":"import { db } from \"../firebase\";\nexport const handleEditProduct = (editableProduct, setProducts, callback) => {\n  // console.log(\"editableProduct\",editableProduct)\n  db.collection(\"products\").doc(editableProduct.id).update({\n    name: editableProduct.name,\n    purchasedUrl: editableProduct.purchasedUrl,\n    unpurchasedUrl: editableProduct.unpurchasedUrl,\n    visibility: editableProduct.visibility,\n    productIcon: editableProduct.productIcon,\n    description: editableProduct.description,\n    id: editableProduct.id,\n    apps: editableProduct.apps,\n    features: editableProduct.features\n  }).then(() => {\n    db.collection(\"products\").get().then(snapshot => {\n      // console.log(snapshot.docs[0].data())\n      setProducts([...snapshot.docs]);\n      updateProductsinUsers(editableProduct);\n      callback();\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const handleAddNewProduct = (addedProduct, setProducts, callback) => {\n  db.collection(\"products\").add({\n    name: addedProduct.name,\n    description: addedProduct.description,\n    purchasedUrl: addedProduct.purchasedUrl,\n    unpurchasedUrl: addedProduct.unpurchasedUrl,\n    visibility: addedProduct.visibility,\n    productIcon: addedProduct.productIcon,\n    apps: addedProduct.apps,\n    features: addedProduct.features\n  }).then(newProduct => {\n    db.collection(\"products\").get().then(snapshot => {\n      let products = [];\n      snapshot.docs.forEach(product => {\n        product.checked = false;\n        products.push(product);\n      });\n      setProducts([...products]); // console.log(\"addedProduct\", addedProduct)\n\n      addNewProductToUsers(addedProduct, newProduct.id);\n      callback();\n    });\n  }).catch(error => {\n    console.error(\"Error writing document: \", error);\n  });\n};\nexport const handleDeleteProduct = (product, setProducts, callback) => {\n  // console.log(product.id)\n  db.collection(\"products\").doc(product.id).delete().then(() => {\n    db.collection(\"products\").get().then(snapshot => {\n      setProducts([...snapshot.docs]);\n      deleteProductFromUsers(product.id);\n    });\n    callback();\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\nconst updateProductsinUsers = product => {\n  db.collection(\"users\").get().then(snapshot => {\n    snapshot.docs.forEach(user => {\n      let products = user.data().products.filter(p => {\n        return product.id !== p.id;\n      });\n      let oldProduct = user.data().products.find(p => {\n        // console.log(\"p.id\", p.id)\n        // console.log(\"product.id\", product.id)\n        return product.id == p.id;\n      }); // console.log(\"old product is\",oldProduct)\n\n      let theNewProduct = {};\n      theNewProduct.name = product.name;\n      theNewProduct.purchasedUrl = product.purchasedUrl;\n      theNewProduct.unpurchasedUrl = product.unpurchasedUrl;\n      theNewProduct.visibility = product.visibility;\n      theNewProduct.description = product.description, theNewProduct.productIcon = product.productIcon, theNewProduct.id = product.id;\n      theNewProduct.apps = [];\n      theNewProduct.features = [];\n      product.apps.forEach(a => {\n        let exist = false;\n        let generatedApp = {};\n        oldProduct.apps.forEach(app => {\n          generatedApp.name = a.name;\n          generatedApp.tag = a.tag;\n          generatedApp.inActiveUrl = a.inActiveUrl;\n          generatedApp.activeUrl = a.activeUrl;\n\n          if (app.name == a.name) {\n            exist = true;\n            generatedApp.active = app.active;\n            generatedApp.comments = app.comment;\n            generatedApp.purchased = app.purchased;\n            generatedApp.credentials = app.credentials;\n            generatedApp.expireDate = app.expireDate;\n            generatedApp.timesAppLaunchedLastLogin = app.timesAppLaunchedLastLogin;\n            generatedApp.timesAppLaunchedPurchased = app.timesAppLaunchedPurchased;\n            generatedApp.lastLaunchDate = app.lastLaunchDate;\n            generatedApp.timesAppLaunched = app.timesAppLaunched;\n            generatedApp.deviceId = app.deviceId;\n            generatedApp.activatedOn = app.activatedOn;\n            generatedApp.codeUsed = app.codeUsed;\n            generatedApp.DateofLastUse = app.DateofLastUse;\n            generatedApp.LaunchesSinceActive = app.LaunchesSinceActive;\n          }\n        });\n\n        if (!exist) {\n          return;\n        }\n\n        theNewProduct.apps.push(generatedApp);\n      });\n      product.features.forEach(a => {\n        let exist = false;\n        let generatedFeature = {};\n        oldProduct.features.forEach(feature => {\n          generatedFeature.name = a.name;\n          generatedFeature.tag = a.tag;\n          generatedFeature.activeUrl = a.activeUrl;\n          generatedFeature.inActiveUrl = a.inActiveUrl;\n\n          if (feature.name == a.name) {\n            exist = true;\n            generatedFeature.comments = a.comment;\n            generatedFeature.active = feature.active;\n            generatedFeature.purchased = feature.purchased;\n            generatedFeature.credentials = feature.credentials;\n            generatedFeature.expireDate = feature.expireDate;\n            generatedFeature.activatedOn = feature.activatedOn;\n            generatedFeature.codeUsed = feature.codeUsed;\n          }\n        });\n\n        if (!exist) {\n          return;\n        }\n\n        theNewProduct.features.push(generatedFeature);\n      });\n      products.push(theNewProduct); // console.log(products)\n\n      db.collection(\"users\").doc(user.id).set({\n        products\n      }, {\n        merge: true\n      });\n    });\n  });\n};\n\nexport const deleteProductFromUsers = id => {\n  db.collection(\"users\").get().then(snapshot => {\n    snapshot.docs.forEach(user => {\n      let products = user.data().products.filter(product => {\n        // console.log(product.name,productName)\n        return product.id !== id;\n      }); // console.log(\"products is \",products)\n\n      db.collection(\"users\").doc(user.id).set({\n        products\n      }, {\n        merge: true\n      });\n    });\n  });\n};\n\nconst addNewProductToUsers = (product, productId) => {\n  db.collection(\"users\").get().then(snapshot => {\n    // console.log(productId)\n    let theProduct = {};\n    theProduct.name = product.name;\n    theProduct.purchasedUrl = product.purchasedUrl;\n    theProduct.unpurchasedUrl = product.unpurchasedUrl;\n    theProduct.visibility = product.visibility;\n    theProduct.productIcon = product.productIcon, theProduct.description = product.description, theProduct.apps = [];\n    theProduct.features = [];\n    theProduct.id = productId; // theProduct.id = product.id;\n\n    product.apps.forEach(app => {\n      theProduct.apps.push({\n        name: app.name,\n        activeUrl: app.activeUrl,\n        inActiveUrl: app.inActiveUrl,\n        tag: app.tag,\n        appIcon: app.appIcon,\n        active: app.active,\n        purchased: app.purchased,\n        credentials: app.credentials,\n        expireDate: app.expireDate,\n        timesAppLaunchedLastLogin: app.timesAppLaunchedLastLogin,\n        timesAppLaunchedPurchased: app.timesAppLaunchedPurchased,\n        lastLaunchDate: app.lastLaunchDate,\n        timesAppLaunched: app.timesAppLaunched,\n        deviceId: \"9876543\",\n        activatedOn: app.activatedOn,\n        codeUsed: \"9876543\",\n        DateofLastUse: app.DateofLastUse,\n        LaunchesSinceActive: app.LaunchesSinceActive\n      });\n    });\n    product.features.forEach(feature => {\n      theProduct.features.push({\n        name: feature.name,\n        activeUrl: feature.activeUrl,\n        inActiveUrl: feature.inActiveUrl,\n        tag: feature.tag\n      });\n    });\n    snapshot.docs.forEach(user => {\n      let products = user.data().products;\n      products.push(theProduct);\n      db.collection(\"users\").doc(user.id).set({\n        products\n      }, {\n        merge: true\n      });\n    });\n  });\n};\n\nexport const handleDeleteProducts = (ids, setProducts, callback) => {\n  // console.log(ids)\n  return db.collection(\"products\").get().then(snapshot => {\n    snapshot.docs.forEach(product => {\n      let products = [];\n      ids.forEach(uid => {\n        db.collection(\"products\").doc(uid).delete();\n        products.push(product);\n        deleteProductFromUsers(product.data().name); // console.log(\"[...snapshot.docs]\", product.data())\n      });\n    });\n  }).then(() => {\n    db.collection(\"products\").get().then(snapshot => {\n      setProducts([...snapshot.docs]);\n      callback();\n    });\n  }).catch(err => {\n    console.log(\"ERR\", err);\n  });\n}; // const resetUsersDetails = () =>{\n//     let products;\n//     db.collection(\"products\").get().then(snapshot=>{\n//         products = snapshot.docs;\n//         db.collection(\"users\").get().then(snapshot=>{\n//             snapshot.docs.forEach(user=>{\n//                 products.forEach(product=>{\n//                     user.products\n//                 })\n//             })\n//         })\n//     });  \n// }","map":{"version":3,"sources":["E:/Folder/React/projects/my_freelance_work/M.Radwan Work/light-bootstrap-dashboard-react/src/views/ProductsActions.js"],"names":["db","handleEditProduct","editableProduct","setProducts","callback","collection","doc","id","update","name","purchasedUrl","unpurchasedUrl","visibility","productIcon","description","apps","features","then","get","snapshot","docs","updateProductsinUsers","catch","err","console","log","handleAddNewProduct","addedProduct","add","newProduct","products","forEach","product","checked","push","addNewProductToUsers","error","handleDeleteProduct","delete","deleteProductFromUsers","user","data","filter","p","oldProduct","find","theNewProduct","a","exist","generatedApp","app","tag","inActiveUrl","activeUrl","active","comments","comment","purchased","credentials","expireDate","timesAppLaunchedLastLogin","timesAppLaunchedPurchased","lastLaunchDate","timesAppLaunched","deviceId","activatedOn","codeUsed","DateofLastUse","LaunchesSinceActive","generatedFeature","feature","set","merge","productId","theProduct","appIcon","handleDeleteProducts","ids","uid"],"mappings":"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","sourcesContent":["import { db } from \"../firebase\";\r\n\r\nexport const handleEditProduct = (editableProduct,setProducts,callback)=> {\r\n    // console.log(\"editableProduct\",editableProduct)\r\n    db.collection(\"products\").doc(editableProduct.id).update({\r\n        name:editableProduct.name,\r\n        purchasedUrl: editableProduct.purchasedUrl,\r\n        unpurchasedUrl: editableProduct.unpurchasedUrl,\r\n        visibility: editableProduct.visibility,\r\n        productIcon: editableProduct.productIcon,\r\n        description: editableProduct.description,\r\n        id: editableProduct.id,\r\n        apps:editableProduct.apps,\r\n        features:editableProduct.features\r\n    }).then(()=>{\r\n        db.collection(\"products\").get()\r\n        .then(snapshot=>{\r\n            // console.log(snapshot.docs[0].data())\r\n            setProducts([...snapshot.docs]);\r\n            updateProductsinUsers(editableProduct)\r\n            callback();\r\n        })\r\n    })\r\n    .catch((err) => {\r\n        console.log(err)\r\n    })\r\n}\r\n\r\nexport const handleAddNewProduct = (addedProduct,setProducts,callback)=>{\r\n    \r\n    db.collection(\"products\").add({\r\n        name: addedProduct.name,\r\n        description: addedProduct.description,\r\n        purchasedUrl: addedProduct.purchasedUrl,\r\n        unpurchasedUrl: addedProduct.unpurchasedUrl,\r\n        visibility: addedProduct.visibility,\r\n        productIcon: addedProduct.productIcon,\r\n        apps: addedProduct.apps,\r\n        features: addedProduct.features\r\n    })\r\n    .then((newProduct) => {\r\n        db.collection(\"products\").get().then(snapshot=>{\r\n            let products = [];\r\n            snapshot.docs.forEach(product=>{\r\n                product.checked = false;\r\n                products.push(product)\r\n            })\r\n            setProducts([...products]);\r\n            // console.log(\"addedProduct\", addedProduct)\r\n            addNewProductToUsers(addedProduct,newProduct.id)\r\n            callback()\r\n        })\r\n    })\r\n    .catch((error) => {\r\n        console.error(\"Error writing document: \", error);\r\n    });\r\n}\r\n\r\nexport const handleDeleteProduct = (product,setProducts, callback)=>{\r\n    // console.log(product.id)\r\n    db.collection(\"products\").doc(product.id).delete()\r\n    .then(()=>{\r\n        db.collection(\"products\").get()\r\n        .then(snapshot=>{\r\n            setProducts([...snapshot.docs]);\r\n            deleteProductFromUsers(product.id);\r\n        })\r\n        callback()\r\n    })\r\n    .catch((err)=>{\r\n        console.log(err)\r\n    })\r\n\r\n}\r\n\r\nconst updateProductsinUsers = (product)=>{\r\n    db.collection(\"users\").get().then(snapshot=>{\r\n        snapshot.docs.forEach(user=>{\r\n            let products = user.data().products.filter(p=>{\r\n                return product.id !== p.id;\r\n            });\r\n\r\n            let oldProduct = user.data().products.find(p=>{\r\n                // console.log(\"p.id\", p.id)\r\n                // console.log(\"product.id\", product.id)\r\n                return product.id == p.id\r\n            })\r\n            // console.log(\"old product is\",oldProduct)\r\n\r\n            let theNewProduct = {};\r\n            theNewProduct.name = product.name;\r\n            theNewProduct.purchasedUrl= product.purchasedUrl;\r\n            theNewProduct.unpurchasedUrl= product.unpurchasedUrl;\r\n            theNewProduct.visibility= product.visibility;\r\n            theNewProduct.description= product.description,\r\n            theNewProduct.productIcon= product.productIcon,\r\n            theNewProduct.id = product.id;\r\n            theNewProduct.apps = [];\r\n            theNewProduct.features = [];\r\n            product.apps.forEach((a)=>{\r\n                let exist = false;\r\n                let generatedApp   = {};\r\n                oldProduct.apps.forEach((app)=>{\r\n                    generatedApp.name = a.name;\r\n                    generatedApp.tag = a.tag;\r\n                    generatedApp.inActiveUrl = a.inActiveUrl;\r\n                    generatedApp.activeUrl = a.activeUrl;\r\n\r\n                    if(app.name == a.name){\r\n                        exist = true;\r\n                        generatedApp.active = app.active  \r\n                        generatedApp.comments = app.comment\r\n                        generatedApp.purchased= app.purchased\r\n                        generatedApp.credentials = app.credentials\r\n                        generatedApp.expireDate= app.expireDate\r\n                        generatedApp.timesAppLaunchedLastLogin = app.timesAppLaunchedLastLogin\r\n                        generatedApp.timesAppLaunchedPurchased = app.timesAppLaunchedPurchased\r\n                        generatedApp.lastLaunchDate = app.lastLaunchDate\r\n                        generatedApp.timesAppLaunched = app.timesAppLaunched\r\n                        generatedApp.deviceId = app.deviceId \r\n                        generatedApp.activatedOn= app.activatedOn\r\n                        generatedApp.codeUsed= app.codeUsed\r\n                        generatedApp.DateofLastUse= app.DateofLastUse\r\n                        generatedApp.LaunchesSinceActive= app.LaunchesSinceActive\r\n                    }\r\n                })\r\n\r\n                if(!exist){\r\n                    return;\r\n                }\r\n\r\n                theNewProduct.apps.push(generatedApp)\r\n            })\r\n            product.features.forEach((a)=>{\r\n                let exist = false;\r\n                let generatedFeature   = {};\r\n                oldProduct.features.forEach((feature)=>{\r\n                        generatedFeature.name = a.name;\r\n                        generatedFeature.tag = a.tag;\r\n                        generatedFeature.activeUrl = a.activeUrl;\r\n                        generatedFeature.inActiveUrl = a.inActiveUrl;\r\n\r\n                        if(feature.name == a.name){\r\n                            exist = true;\r\n                            generatedFeature.comments = a.comment\r\n                            generatedFeature.active=feature.active\r\n                            generatedFeature.purchased= feature.purchased\r\n                            generatedFeature.credentials= feature.credentials\r\n                            generatedFeature.expireDate= feature.expireDate\r\n                            generatedFeature.activatedOn= feature.activatedOn\r\n                            generatedFeature.codeUsed= feature.codeUsed \r\n                        }\r\n                })\r\n\r\n                if(!exist){\r\n                    return;\r\n                }\r\n                theNewProduct.features.push(generatedFeature)\r\n            })\r\n\r\n            products.push(theNewProduct)\r\n            // console.log(products)\r\n            db.collection(\"users\").doc(user.id).set({\r\n                products\r\n            },{merge:true})\r\n        })\r\n    })\r\n}\r\n\r\nexport const deleteProductFromUsers = (id)=>{\r\n    db.collection(\"users\").get().then(snapshot=>{\r\n        snapshot.docs.forEach(user=>{\r\n            let products = user.data().products.filter(product=>{\r\n                // console.log(product.name,productName)\r\n                return product.id !== id;\r\n            });\r\n\r\n            // console.log(\"products is \",products)\r\n            db.collection(\"users\").doc(user.id).set({\r\n                products\r\n            },{merge:true})\r\n        })\r\n    })\r\n}\r\n\r\nconst addNewProductToUsers = (product,productId)=>{\r\n    db.collection(\"users\").get().then(snapshot=>{\r\n        // console.log(productId)\r\n        let theProduct = {};\r\n        theProduct.name = product.name;\r\n        theProduct.purchasedUrl= product.purchasedUrl;\r\n        theProduct.unpurchasedUrl= product.unpurchasedUrl;\r\n        theProduct.visibility= product.visibility;\r\n        theProduct.productIcon= product.productIcon,\r\n        theProduct.description= product.description,\r\n        theProduct.apps = [];\r\n        theProduct.features = [];\r\n        theProduct.id = productId\r\n        // theProduct.id = product.id;\r\n        product.apps.forEach(app=>{\r\n            theProduct.apps.push({\r\n                name:app.name,\r\n                activeUrl:app.activeUrl,\r\n                inActiveUrl:app.inActiveUrl ,\r\n                tag: app.tag ,\r\n                appIcon: app.appIcon ,\r\n                active:app.active ,\r\n                purchased: app.purchased,\r\n                credentials : app.credentials ,\r\n                expireDate: app.expireDate,\r\n                timesAppLaunchedLastLogin : app.timesAppLaunchedLastLogin ,\r\n                timesAppLaunchedPurchased : app.timesAppLaunchedPurchased ,\r\n                lastLaunchDate : app.lastLaunchDate ,\r\n                timesAppLaunched : app.timesAppLaunched ,\r\n                deviceId : \"9876543\",\r\n                activatedOn: app.activatedOn,\r\n                codeUsed: \"9876543\" ,\r\n                DateofLastUse: app.DateofLastUse,\r\n                LaunchesSinceActive: app.LaunchesSinceActive \r\n            })\r\n        })\r\n        product.features.forEach(feature => {\r\n            theProduct.features.push({\r\n            name:feature.name,\r\n            activeUrl:feature.activeUrl,\r\n            inActiveUrl:feature.inActiveUrl ,\r\n            tag: feature.tag ,\r\n            })\r\n        })\r\n        \r\n        snapshot.docs.forEach(user=>{\r\n            let products = user.data().products;\r\n            products.push(theProduct);\r\n            db.collection(\"users\").doc(user.id).set({\r\n                products\r\n            },{merge:true})\r\n        })\r\n    })\r\n}\r\n\r\nexport const handleDeleteProducts = (ids, setProducts,callback) =>{  \r\n    // console.log(ids)\r\n    return db.collection(\"products\").get().then((snapshot) => {\r\n        snapshot.docs.forEach((product) => {\r\n            let products = [];\r\n            ids.forEach(uid => {\r\n                db.collection(\"products\").doc(uid).delete();\r\n                products.push(product)\r\n                deleteProductFromUsers(product.data().name);\r\n                // console.log(\"[...snapshot.docs]\", product.data())\r\n            })\r\n        })\r\n    }).then(() => {\r\n        db.collection(\"products\").get()\r\n        .then(snapshot => {\r\n            setProducts([...snapshot.docs])\r\n            callback()\r\n        })\r\n    })\r\n    .catch(err=>{\r\n    console.log(\"ERR\",err);\r\n    })\r\n}\r\n\r\n// const resetUsersDetails = () =>{\r\n//     let products;\r\n//     db.collection(\"products\").get().then(snapshot=>{\r\n//         products = snapshot.docs;\r\n//         db.collection(\"users\").get().then(snapshot=>{\r\n//             snapshot.docs.forEach(user=>{\r\n//                 products.forEach(product=>{\r\n//                     user.products\r\n//                 })\r\n//             })\r\n//         })\r\n//     });  \r\n// }"]},"metadata":{},"sourceType":"module"}